# -*- coding: utf-8 -*-
"""lab_example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Masters-in-Management-2023-2024/lab-11-sql-Danniquench/blob/main/lab_example.ipynb

# Lab Exercise: SQL Analysis with Polars

In this lab, you'll practice SQL queries using Polars' built-in SQL functionality. Complete each exercise by writing the appropriate SQL query.
"""

# Setup - Run this cell first
import polars as pl

# Load data
airlines = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_airlines.csv', null_values=['NA'])
airports = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_airports.csv', null_values=['NA'])
flights = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_flights.csv', null_values=['NA'])
planes = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_planes.csv', null_values=['NA'])

# Define schema for weather to ensure correct dtype for 'precip'
weather_schema = {
    "origin": pl.Utf8,
    "year": pl.Int64,
    "month": pl.Int64,
    "day": pl.Int64,
    "hour": pl.Int64,
    "temp": pl.Float64,
    "dewp": pl.Float64,
    "humid": pl.Float64,
    "wind_dir": pl.Float64,
    "wind_speed": pl.Float64,
    "wind_gust": pl.Float64,
    "precip": pl.Float64,
    "pressure": pl.Float64,
    "visib": pl.Float64,
    "time_hour": pl.Utf8, # Read as Utf8 initially for strptime
}

weather = pl.read_csv('https://raw.githubusercontent.com/philhetzel/opan5510-class11/refs/heads/main/data/nyc_weather.csv', null_values=['NA'], schema=weather_schema)


flights = flights.with_columns(pl.col("time_hour").str.strptime(pl.Datetime))
weather = weather.with_columns(pl.col("time_hour").str.strptime(pl.Datetime))

# Create SQL context
ctx = pl.SQLContext(
    airlines=airlines,
    airports=airports,
    flights=flights,
    planes=planes,
    weather=weather,
    eager_execution=True
)

print("Setup complete! Tables available:")
print(ctx.execute("SHOW TABLES"))

"""## Exercise 1: Basic Queries

### 1.1 Find all unique carriers in the airlines table
"""

# Write your SQL query here
result = ctx.execute("""
SELECT DISTINCT carrier
FROM airlines
""")

# print(result)
print (result)

"""### 1.2 Find the top 10 destinations by number of flights"""

# Write your SQL query here
result = ctx.execute("""
SELECT dest, COUNT(*) AS num_flights
FROM flights
GROUP BY dest
ORDER BY num_flights DESC
LIMIT 10
""")

# print(result)
print(result)

"""### 1.3 Find all flights that departed more than 2 hours late (120 minutes)"""

# Write your SQL query here
result = ctx.execute("""
SELECT *
FROM flights
WHERE dep_delay > 120
""")

# print(result)
print(result)

"""## Exercise 2: Aggregation

### 2.1 Calculate the average departure delay for each origin airport
"""

# Write your SQL query here
result = ctx.execute("""
SELECT origin,
       AVG(dep_delay) AS avg_dep_delay
FROM flights
GROUP BY origin
""")

# print(result)
print(result)

"""### 2.2 Find the busiest month of the year

Count the number of flights per month and find which month has the most flights.
"""

# First, let's check what columns are available
result = ctx.execute("""
    SELECT *
    FROM flights
    LIMIT 5
""")
# print(result)
print(result)

# Now write your query to find busiest month
result = ctx.execute("""
    SELECT month,
           COUNT(*) AS flight_count
    FROM flights
    GROUP BY month
    ORDER BY flight_count DESC
    LIMIT 1
""")

# print(result)
print (result)

"""### 2.3 Calculate the on-time performance rate for each carrier

Consider a flight on-time if the departure delay is <= 15 minutes.
"""

# Write your SQL query here
result = ctx.execute("""
    SELECT carrier,
           ROUND(
               SUM(CASE WHEN dep_delay <= 15 THEN 1 ELSE 0 END) * 100.0 / COUNT(*),
               2
           ) AS on_time_rate
    FROM flights
    GROUP BY carrier
    ORDER BY on_time_rate DESC
""")

# print(result)
print(result)

"""## Exercise 3: Joins

### 3.1 List all flights with their airline names (not just carrier codes)

Show the first 20 flights with carrier code, airline name, flight number, origin, and destination.
"""

# Write your SQL query here
result = ctx.execute("""
SELECT
    f.carrier,
    a.name AS airline_name,
    f.flight,
    f.origin,
    f.dest
FROM flights f
JOIN airlines a
    ON f.carrier = a.carrier
LIMIT 20
""")

# print(result)
print(result)

"""### 3.2 Find the average age of planes for each carrier

Hint: The planes table has a `year` column for manufacture year. Calculate age based on 2013.
"""

# Write your SQL query here
result = ctx.execute("""
SELECT
    f.carrier,
    AVG(2013 - p.year) AS avg_age
FROM flights f
JOIN planes p
    ON f.tailnum = p.tailnum
GROUP BY f.carrier
""")

# print(result)
print(result)

"""### 3.3 Find flights that experienced both departure delays and bad weather

Join flights with weather data and find flights where departure delay > 30 minutes and either wind_speed > 20 or precip > 0.1
"""

# First, explore the weather table structure
result = ctx.execute("""
    SELECT *
    FROM weather
    LIMIT 5
""")

# print(result)
print(result)

# Now write your join query
result = ctx.execute("""
SELECT
    f.year, f.month, f.day, f.hour,
    f.origin, f.dest, f.carrier, f.flight,
    f.dep_delay,
    w.wind_speed, w.precip
FROM flights AS f
JOIN weather AS w
  ON f.year  = w.year
 AND f.month = w.month
 AND f.day   = w.day
 AND f.hour  = w.hour
 AND f.origin = w.origin
WHERE f.dep_delay > 30
  AND (w.wind_speed > 20 OR w.precip > 0.1)
""")

# print(result)
print(result)

"""## Exercise 4: Advanced Queries

### 4.1 Find the most popular aircraft types (by number of flights)

Join flights with planes to get manufacturer and model information. Show top 10.
"""

# Write your SQL query here
result = ctx.execute("""
SELECT
    COALESCE(p.type, 'Unknown') AS aircraft_type,
    COALESCE(p.manufacturer, 'Unknown') AS manufacturer,
    COALESCE(p.model, 'Unknown') AS model,
    COUNT(*) AS num_flights
FROM flights AS f
JOIN planes AS p
ON f.tailnum = p.tailnum
GROUP BY p.type, p.manufacturer, p.model
ORDER BY num_flights DESC
LIMIT 10
""")

# print(result)
print(result)

"""### 4.2 Analyze route performance

Find the top 10 routes (origin-destination pairs) with:
- Total number of flights
- Average departure delay
- Percentage of flights delayed more than 30 minutes

Include airport names, not just codes.
"""

# Write your SQL query here
result = ctx.execute("""
SELECT
    "name"    AS origin_airport,   -- from first airports join (ao)
    "name:ad" AS dest_airport,     -- from second airports join (ad)
    COUNT(*) AS total_flights,
    ROUND(AVG(f.dep_delay), 2) AS avg_dep_delay,
    ROUND(
        100.0 * SUM(CASE WHEN f.dep_delay > 30 THEN 1 ELSE 0 END) / COUNT(*),
        2
    ) AS pct_delayed_over_30
FROM flights AS f
JOIN airports AS ao
    ON f.origin = ao.faa
JOIN airports AS ad
    ON f.dest = ad.faa
GROUP BY "name", "name:ad"
ORDER BY total_flights DESC
LIMIT 10
""")

# print(result)
print(result)

# Write your SQL query here
result = ctx.execute("""
SELECT
    "name"    AS origin_airport,   -- from first airports join (ao)
    "name:ad" AS dest_airport,     -- from second airports join (ad)
    COUNT(*) AS total_flights,
    ROUND(AVG(f.dep_delay), 2) AS avg_dep_delay,
    ROUND(
        100.0 * SUM(CASE WHEN f.dep_delay > 30 THEN 1 ELSE 0 END) / COUNT(*),
        2
    ) AS pct_delayed_over_30
FROM flights AS f
JOIN airports AS ao
  ON f.origin = ao.faa
JOIN airports AS ad
  ON f.dest = ad.faa
GROUP BY "name", "name:ad"          -- must use the real column names, not aliases
ORDER BY pct_delayed_over_30 DESC
LIMIT 10
""")

#print result
print(result)

"""## Bonus: Compare with Polars

### Choose one of the queries above and implement it using Polars

This will help you understand the relationship between SQL and Polars operations.
"""

# Example: Let's implement Exercise 2.1 (average delay by origin) in Polars

# SQL version (for reference)
sql_result = ctx.execute("""
    SELECT
        origin,
        AVG(dep_delay) as avg_delay
    FROM flights
    WHERE dep_delay IS NOT NULL
    GROUP BY origin
    ORDER BY avg_delay DESC
""")

# Polars version
polars_result = (
    flights
    .filter(pl.col('dep_delay').is_not_null())
    .group_by('origin')
    .agg(pl.col('dep_delay').mean().alias('avg_delay'))
    .sort('avg_delay', descending=True)
)

print("SQL Result:")
print(sql_result)
print("\nPolars Result:")
print(polars_result)

# Now implement one of your own queries in Polars below:
# Your Polars code here

# Perform the analysis using Polars DataFrame operations

# Join flights with airports for origin airport names
flights_with_origin_names = flights.join(
    airports.select(['faa', 'name']).rename({'name': 'origin_airport_name'}),
    left_on='origin',
    right_on='faa',
    how='left'
)

# Join the result with airports for destination airport names
flights_with_airport_names = flights_with_origin_names.join(
    airports.select(['faa', 'name']).rename({'name': 'dest_airport_name'}),
    left_on='dest',
    right_on='faa',
    how='left'
)

# Group by origin and destination airport names and aggregate
route_performance = flights_with_airport_names.group_by(['origin_airport_name', 'dest_airport_name']).agg([
    pl.count().alias('total_flights'),
    pl.col('dep_delay').mean().round(2).alias('avg_dep_delay'),
    (
        (pl.col('dep_delay') > 30).sum().cast(pl.Float64) / pl.count() * 100
    ).round(2).alias('pct_delayed_over_30')
])

# Order by total_flights descending and show top 10
top_routes_polars = route_performance.sort('total_flights', descending=True).limit(10)

print("Route Performance Analysis (Polars DataFrame):")
print(top_routes_polars)